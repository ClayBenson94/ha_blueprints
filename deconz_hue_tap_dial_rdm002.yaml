blueprint:
  name: Deconz - Philips Hue - Tap Dial Switch
  homeassistant:
    min_version: '2024.6.0'
  description: |
    Below is a list of variables that are exposed by this blueprint that can be used in templates:
    - `dial_button`: If a button is pressed, will be one of `button1`, `button2`, `button3`, or `button4`.
    - `rotary_event`: If the rotary dial is turned, an integer representing the amount the dial was turned. Will be a positive integer when clockwise, negative when counter-clockwise.
  domain: automation
  input:
    ###########################
    ## Overall Script Inputs ##
    ###########################
    remote:
      name: Hue Dial Switch
      selector:
        device:
          integration: deconz
          model: RDM002
          multiple: false

    #####################
    ## Button 1 Inputs ##
    #####################
    button1:
      name: Button 1
      collapsed: true
      input:
        button1_short:
          name: Button 1 (Short Press)
          default: []
          selector:
            action: {}
        button1_long:
          name: "Button 1 (Long Press)"
          default: []
          selector:
            action: {}
        button1_long_press_mode:
          name: '"Long Press" Button Behavior'
          description: |
            Define how you want long pressing this button to work.
            - `Press` will run your actions when releasing after a long press.
            - `Hold` will run your action multiple times, firing events roughly every ~1s while the button is held.
               NOTE: Generic button actions will still run once on `Press` but will run each time the `Hold` event fires, if configured.
          default: press
          selector:
            select:
              options:
                - value: press
                  label: Press
                - value: hold
                  label: Hold

    #####################
    ## Button 2 Inputs ##
    #####################
    button2:
      name: Button 2
      collapsed: true
      input:
        button2_short:
          name: Button 2 (Short Press)
          default: []
          selector:
            action: {}
        button2_long:
          name: "Button 2 (Long Press)"
          default: []
          selector:
            action: {}
        button2_long_press_mode:
          name: '"Long Press" Button Behavior'
          description: |
            Define how you want long pressing this button to work.
            - `Press` will run your actions when releasing after a long press.
            - `Hold` will run your action multiple times, firing events roughly every ~1s while the button is held.
               NOTE: Generic button actions will still run once on `Press` but will run each time the `Hold` event fires, if configured.
          default: press
          selector:
            select:
              options:
                - value: press
                  label: Press
                - value: hold
                  label: Hold

    #####################
    ## Button 3 Inputs ##
    #####################
    button3:
      name: Button 3
      collapsed: true
      input:
        button3_short:
          name: Button 3 (Short Press)
          default: []
          selector:
            action: {}
        button3_long:
          name: "Button 3 (Long Press)"
          default: []
          selector:
            action: {}
        button3_long_press_mode:
          name: '"Long Press" Button Behavior'
          description: |
            Define how you want long pressing this button to work.
            - `Press` will run your actions when releasing after a long press.
            - `Hold` will run your action multiple times, firing events roughly every ~1s while the button is held.
               NOTE: Generic button actions will still run once on `Press` but will run each time the `Hold` event fires, if configured.
          default: press
          selector:
            select:
              options:
                - value: press
                  label: Press
                - value: hold
                  label: Hold

    #####################
    ## Button 4 Inputs ##
    #####################
    button4:
      name: Button 4
      collapsed: true
      input:
        button4_short:
          name: Button 4 (Short Press)
          default: []
          selector:
            action: {}
        button4_long:
          name: "Button 4 (Long Press)"
          default: []
          selector:
            action: {}
        button4_long_press_mode:
          name: '"Long Press" Button Behavior'
          description: |
            Define how you want long pressing this button to work.
            - `Press` will run your actions when releasing after a long press.
            - `Hold` will run your action multiple times, firing events roughly every ~1s while the button is held.
               NOTE: Generic button actions will still run once on `Press` but will run each time the `Hold` event fires, if configured.
          default: press
          selector:
            select:
              options:
                - value: press
                  label: Press
                - value: hold
                  label: Hold

    #####################
    ## Rotation Inputs ##
    #####################
    rotation:
      name: Rotation Events
      collapsed: true
      input:
        rotate_left:
          name: ↪️ Rotate Left
          description: (-10% Brightness precentage, no transition -> for smooth hue dimming)
          default: []
          selector:
            action: {}
        rotate_right:
          name: ↩️ Rotate Right
          description: (10% Brightness precentage, no transition -> for smooth hue dimming)
          default: []
          selector:
            action: {}

    ####################
    ## Generic Inputs ##
    ####################
    generic_actions:
      name: Generic Actions
      collapsed: true
      input:
        short_generic:
          name: Generic short button press
          description: These actions will run ***before each*** short button press. Useful for configuring generic actions that happen on button presses using the `dial_button` variable.
          default: []
          selector:
            action: {}
        long_generic:
          name: Generic long button press
          description: These actions will run ***before each*** long button press. Useful for configuring generic actions that happen on button presses using the `dial_button` variable.
          default: []
          selector:
            action: {}
        rotate_generic:
          name: Generic rotation event
          description: These actions will run ***before each*** short button press. Useful for configuring generic actions that happen on any rotation event using the `rotary_event` variable.
          default: []
          selector:
            action: {}
mode: restart
max_exceeded: silent
trigger:
- platform: event
  event_type: deconz_event
  event_data:
    device_id: !input remote
- platform: event
  event_type: deconz_relative_rotary_event
  event_data:
    device_id: !input remote
action:
  - variables:
      event: '{{ trigger.event.data.event }}'
      rotary_event: '{{ trigger.event.data.rotation }}'
      dial_button: >-
        {% if (event | string).startswith('1') %}
          button1
        {% elif (event | string).startswith('2') %}
          button2
        {% elif (event | string).startswith('3') %}
          button3
        {% elif (event | string).startswith('4') %}
          button4
        {% endif %}
      button1_long_press_mode: !input button1_long_press_mode
      button2_long_press_mode: !input button2_long_press_mode
      button3_long_press_mode: !input button3_long_press_mode
      button4_long_press_mode: !input button4_long_press_mode
  - choose:
    - conditions:
      - '{{ event == 1002 }}'
      sequence:
        - repeat:
            count: 1
            sequence: !input short_generic
        - repeat:
            count: 1
            sequence: !input button1_short
    - conditions:
      - '{{ event == 2002 }}'
      sequence:
        - repeat:
            count: 1
            sequence: !input short_generic
        - repeat:
            count: 1
            sequence: !input button2_short
    - conditions:
      - '{{ event == 3002 }}'
      sequence:
        - repeat:
            count: 1
            sequence: !input short_generic
        - repeat:
            count: 1
            sequence: !input button3_short
    - conditions:
      - '{{ event == 4002 }}'
      sequence:
        - repeat:
            count: 1
            sequence: !input short_generic
        - repeat:
            count: 1
            sequence: !input button4_short
    - conditions:
      - '{{ (event == 1001 and button1_long_press_mode == "hold") or (event == 1003 and button1_long_press_mode == "press") }}'
      sequence: !input button1_long
    - conditions:
      - '{{ (event == 2001 and button2_long_press_mode == "hold") or (event == 2003 and button2_long_press_mode == "press") }}'
      sequence: !input button2_long
    - conditions:
      - '{{ (event == 3001 and button3_long_press_mode == "hold") or (event == 3003 and button3_long_press_mode == "press") }}'
      sequence: !input button3_long
    - conditions:
      - '{{ (event == 4001 and button4_long_press_mode == "hold") or (event == 4003 and button4_long_press_mode == "press") }}'
      sequence: !input button4_long
    - conditions:
      - '{{ rotary_event <= 0 }}'
      sequence:
        - repeat:
            count: 1
            sequence: !input rotate_generic
        - repeat:
            count: 1
            sequence: !input rotate_left
    - conditions:
      - '{{ rotary_event >= 0 }}'
      sequence:
        - repeat:
            count: 1
            sequence: !input rotate_generic
        - repeat:
            count: 1
            sequence: !input rotate_right